Используется для разделения абстракции и реализации чтобы и то и другое можно было менять независимо друг от друга.
Предпочтение компановки наследованию.

Пример.
Есть модель некоего процесса, где, в зависимости от условий на каждом уровне нужно использовать разные компоненты.
Берем данные из разных источников (http-parsing/file/database/...etc) и рассылаем их дальше по разным адресатам разными
способами (email/messenger). Можно пойти путем создания сущностей под каждую ситуацию: сендер для парсинга, сендер для
файлридинга, сендер для базы данных. Плюс еще способы рассылки разные - на этом уровне тоже можно множить сущности.
С "мостом" же каждый уровень различий "нанизывается" на интерфейс а в сущностях уже используются ссылки через интерфейс.
Т.е. для описания получения данных создается интерфейс IDataReader с методом getData а в сущностях уже
прописываются конкретные реализации в зависимости от источника данных. Так же для описания передачи данных
создается интерфейс IDataSender с методом sendData который реализуется в сущностях в зависимости от способа
отправки данных.

